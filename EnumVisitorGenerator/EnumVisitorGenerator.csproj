<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <LangVersion>latest</LangVersion>
    <EnforceExtendedAnalyzerRules>true</EnforceExtendedAnalyzerRules>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <Authors>Dmitry Tikhonov</Authors>
    <Company />
    <Version>1.0.0</Version>
    <Summary>It generates "visitor" pattern for marked enums</Summary>
    <Description>
      If you mark an enum with the [VisitorGenerator] attribute, the source generator will generate several "Visitor" interfaces, where each method will correspond to an item of the target enum. Additionally, an extension class with methods will be generated where the target enum is switched and corresponding visitor interface methods are called.
      This helps to avoid error-prone direct switches.
    </Description>
    <PackageReleaseNotes>https://github.com/0x1000000/EnumVisitorGenerator/blob/main/CHANGELOG.md</PackageReleaseNotes>
    <PackageProjectUrl>https://github.com/0x1000000/EnumVisitorGenerator</PackageProjectUrl>
    <PackageTags>enum visitor interface sourcegenerator</PackageTags>
    <AssemblyVersion>1.0.0</AssemblyVersion>
    <FileVersion>1.0.0</FileVersion>
    <SignAssembly>True</SignAssembly>
    <DelaySign>false</DelaySign>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <AssemblyOriginatorKeyFile>.\..\EnumVisitorGenerator.snk</AssemblyOriginatorKeyFile>
    <IncludeBuildOutput>false</IncludeBuildOutput>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="3.3.3" PrivateAssets="all" />
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="4.4.0" PrivateAssets="all" />
  </ItemGroup>

  <ItemGroup>
    <None Include="$(OutputPath)\$(AssemblyName).dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
  </ItemGroup>

</Project>
